import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
 */

/**
 * Support for modules that contain Java code
 */

apply from: rootProject.file( 'gradle/base-information.gradle' )
apply from: rootProject.file( 'gradle/libraries.gradle' )
apply from: rootProject.file( 'gradle/databases.gradle' )

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'build-dashboard'
apply plugin: 'project-report'

apply plugin: JavaModulePlugin

class JavaModulePlugin implements Plugin<Project> {
	void apply(Project project) {
		// Apply the extension object
		JavaModuleExtension extension = project.extensions.create( "javaModule", JavaModuleExtension )
		project.convention.plugins.javaModule = extension

		// Apply the configuration to the project
		project.afterEvaluate {
			if ( !extension.moduleDescription ) {
				throw new InvalidUserDataException( "Module description was not configured" )
			}

			project.configure( project ) {
				group = 'org.hibernate.sebersole.gcr'

				version = project.hibernateVersion

				sourceCompatibility = project.baselineJavaVersion
				targetCompatibility = project.baselineJavaVersion

//				version = project.extensions.baseInfo.hibernateVersion
//
//				sourceCompatibility = project.extensions.baseInfo.baselineJavaVersion
//				targetCompatibility = project.extensions.baseInfo.baselineJavaVersion

				configurations {
					provided {
						description = 'Non-exported compile-time dependencies.'
					}
					jbossLoggingTool {
						description = 'Dependencies for running the jboss-logging tooling.'
					}
					asciidoclet {
						description = "Dependencies for Asciidoctor Javadoc taglet"
					}
				}

				configurations.all*.exclude group: 'xml-apis', module: 'xml-apis'

				dependencies {
					compile libraries.logging

					provided libraries.logging_annotations

					jbossLoggingTool( libraries.logging_processor )

					testCompile( libraries.junit )
					testCompile( libraries.byteman )
					testCompile( libraries.byteman_install )
					testCompile( libraries.byteman_bmunit )

					testRuntime( libraries.log4j )
					testRuntime( libraries.javassist )
					testRuntime( libraries.byteBuddy )
					testRuntime( libraries.woodstox )

					//Databases
					testRuntime( libraries.h2 )
					testRuntime( libraries.hsqldb )
					testRuntime( libraries.postgresql )
					testRuntime( libraries.mysql )
					testRuntime( libraries.mariadb )
					testRuntime( libraries.mssql )
					testRuntime( libraries.informix )

					asciidoclet 'org.asciidoctor:asciidoclet:1.+'

					if ( db.equalsIgnoreCase( 'oracle' ) ) {
						dependencies {
							testRuntime( libraries.oracle ) {
								exclude group: 'com.oracle.jdbc', module: 'xmlparserv2'
							}
						}
					}
					else if ( db.equalsIgnoreCase( 'db2' ) ) {
						dependencies {
							testRuntime( libraries.db2 )
						}
					}
					else if ( db.equalsIgnoreCase( 'hana' ) ) {
						dependencies {
							testRuntime( libraries.hana )
						}
					}
				}

				tasks.withType(JavaCompile) {
					options.encoding = 'UTF-8'
				}

				tasks.maybeCreate( 'compile' ).dependsOn( [compileJava, processResources, compileTestJava, processTestResources] )

				sourceSets.main {
					compileClasspath += configurations.provided
					compileClasspath += configurations.jbossLoggingTool
				}

				convention.findPlugin( JavaPluginConvention.class ).sourceSets.each { sourceSet ->
					JavaCompile javaCompileTask = project.tasks.findByName( sourceSet.compileJavaTaskName ) as JavaCompile

					// NOTE : this aptDir stuff is needed until we can have IntelliJ run annotation processors for us
					//		which cannot happen until we can fold hibernate-testing back into hibernate-core/src/test
					//		which cannot happen until... ugh
					File aptDir = file( "${buildDir}/generated-src/apt/${sourceSet.name}" )
					sourceSet.allJava.srcDir( aptDir )

					javaCompileTask.options.compilerArgs += [
							"-nowarn",
							"-encoding", "UTF-8",
							"-s", "${aptDir.absolutePath}"
					]

					javaCompileTask.doFirst {
						aptDir.mkdirs()
					}
				}

				tasks.withType( Test.class ).all { task ->
					if ( JavaVersion.current().isJava9Compatible() ) {
						// Byteman needs this property to be set, https://developer.jboss.org/thread/274997
						task.jvmArgs += ["-Djdk.attach.allowAttachSelf=true"]
					}
					task.jvmArgs += [
							'-XX:+HeapDumpOnOutOfMemoryError',
							"-XX:HeapDumpPath=${file( "${buildDir}/OOM-dump.hprof" ).absolutePath}",
							'-XX:MetaspaceSize=512M'
					]

					task.maxHeapSize = '2G'

					task.systemProperties['hibernate.test.validatefailureexpected'] = true
					task.systemProperties += System.properties.findAll { it.key.startsWith( "hibernate." ) }
				}

				processTestResources {
					doLast {
						copy {
							from( sourceSets.test.java.srcDirs ) {
								include '**/*.properties'
								include '**/*.xml'
							}
							into sourceSets.test.output.classesDir
						}
						copy {
							from file( 'src/test/resources' )
							into file( "${buildDir}/resources/test" )
							exclude 'src/test/resources/arquillian.xml'
							exclude 'src/test/resources/hibernate.properties'
						}
						copy {
							from file( 'src/test/resources/hibernate.properties' )
							into file( "${buildDir}/resources/test" )
							filter( ReplaceTokens, tokens: dbBundle[db] )
						}
					}
				}

				/*
				 The latest versions of IntelliJ copy and use the test resources into out/test/resources
				 this occurs before the placeholder in the test config file are substituted
				 with the testing values.

				 This behaviour prevents the execution of the hibernate tests from inside the IDE.

				 A solution is to enable the 'After Build' Execution of the copyResourcesToIntelliJOutFolder task
				 from the 'Gradle project' IntelliJ tool window ( The task can be found under hibernate-orm > Task > other)
				 */
				tasks.maybeCreate( 'copyResourcesToIntelliJOutFolder' ).doLast {
					copy {
						from "$buildDir/resources/test"
						into 'out/test/resources'
					}
				}

				jar {
					manifest = osgiManifest {
						// GRADLE-1411: Even if we override Imports and Exports
						// auto-generation with instructions, classesDir and classpath
						// need to be here (temporarily).

						if ( project.pluginManager.hasPlugin( 'groovy' ) ) {
							classesDir = sourceSets.main.groovy.outputDir
						}
						else {
							classesDir = sourceSets.main.output.classesDir
						}
						classpath = configurations.runtime


						String moduleName = java9ModuleName( project )

						// Java 9 module name
						instruction 'Automatic-Module-Name', moduleName

						// the OSGi metadata
						symbolicName moduleName
						vendor 'Hibernate.org'
						description extension.moduleDescription
						docURL "http://www.hibernate.org/orm/${project.hibernateMajorMinorVersion}"

						instruction 'Import-Package',
									// Temporarily support JTA 1.1 -- Karaf and other frameworks still
									// use it.  Without this, the plugin generates [1.2,2).
									'javax.transaction;version="[1.1,2)"',
									// Tell Gradle OSGi to still dynamically import the other packages.
									// IMPORTANT: Do not include the * in the modules' .gradle files.
									// If it exists more than once, the manifest will physically contain a *.
									'*'

						// Basic JAR manifest metadata
						instruction 'Specification-Title', name
						instruction 'Specification-Version', version
						instruction 'Specification-Vendor', 'Hibernate.org'
						instruction 'Implementation-Title', name
						instruction 'Implementation-Version', version
						instruction 'Implementation-VersionFamily', project.hibernateMajorMinorVersion
						instruction 'Implementation-Vendor', 'Hibernate.org'
						instruction 'Implementation-Vendor-Id', 'org.hibernate'
						instruction 'Implementation-Url', 'http://hibernate.org/orm'
					}
				}

			}

		}
	}

	String java9ModuleName(Project project) {
		String name = project.name

		// alternative is to just use the full project name (don't drop the 'hibernate-' prefix)

		if ( name.startsWith( 'hibernate-' ) ) {
			name = name.drop( 'hibernate-'.length() )
		}

		return "org.hibernate.orm.$name"
	}
}

class JavaModuleExtension {
	String moduleDescription
}